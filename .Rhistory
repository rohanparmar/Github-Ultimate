# Author: Rohan Parmar
# Student ID: 301420874
# Date: 15th January 2023
sum = 100 + 10 + 1
print(sum)
install.packages("rmarkdown")
# I could find this out by summing the probabilities over the
#   outcomes 1,2,...,10 instead:
# Some functions can operate simultaneously on sequences of
#   numbers
# a:b creates a sequence of integers running from a to b
dbinom(x=1:10, size=10, prob=.0001)
# Look at a plot of this distribution
plot(x=0:10, y=dbinom(x=0:10, size=10, prob=.0001), type="h",
xlab="Success Count", ylab="Probability",
main="Probability distribution for Covid Restaurant example")
# The sum() function adds the things inside the parentheses.
sum(dbinom(x=1:10, size=10, prob=.0001))
#Repeating 1-P(X=0), which can awkwardly be solved as
#  P(X<=10) - P(X<=0)
pbinom(q=10, size=10, prob=.0001) -
pbinom(q=0, size=10, prob=.0001)
#############################################################
# Means and Variances of Binomial
###########
# Mean, variance, and SD of binomial are easily computed by
#   hand
#
n = 10
p = 0.0001
# Mean (I'm calling it "EV" for "Expected value"), var, and sd
# Putting parentheses around whole line prints it out
(EV = n*p)
(var = n*p*(1-p))
(sd = sqrt(var))
source("~/Desktop/Stat 305/Assignments/Assignment 1/Lecture 2a Script Binomial.R")
# Covid example
# in dbinom(), x=#successes, size=#trials, prob=P(Success).
# Probability that at least one of 10 people has Covid when
#   probability is .0001.
1 - dbinom(x=0, size=140, prob=.0001)
source("~/Desktop/Stat 305/Assignments/Assignment 1/Lecture 2a Script Binomial.R")
# Covid example
# in dbinom(), x=#successes, size=#trials, prob=P(Success).
# Probability that at least one of 10 people has Covid when
#   probability is .0001.
1 - dbinom(x=0, size=5000, prob=.0005)
set.seed(1567038354)
samps = c(3,10,30,100)
R=10000
for(n in samps){
norms = matrix(rnorm(n=n*R, mean=0, sd=1), nrow=R)
lognorms = exp(norms)
exps = matrix(rexp(n=n*R, rate=1), nrow=R)
norm.mean = apply(X=norms, MARGIN=1, FUN=mean)
norm.var = apply(X=norms, MARGIN=1, FUN=var)
norm.max = apply(X=norms, MARGIN=1, FUN=max)
norm.min = apply(X=norms, MARGIN=1, FUN=min)
norm.range = norm.max - norm.min
lnorm.mean = apply(X=lognorms, MARGIN=1, FUN=mean)
lnorm.var = apply(X=lognorms, MARGIN=1, FUN=var)
lnorm.max = apply(X=lognorms, MARGIN=1, FUN=max)
lnorm.min = apply(X=lognorms, MARGIN=1, FUN=min)
lnorm.range = lnorm.max - lnorm.min
exp.mean = apply(X=exps, MARGIN=1, FUN=mean)
exp.var = apply(X=exps, MARGIN=1, FUN=var)
exp.max = apply(X=exps, MARGIN=1, FUN=max)
exp.min = apply(X=exps, MARGIN=1, FUN=min)
exp.range = exp.max - exp.min
windows(h=30, w=20)
par(mfrow=c(5,2))
hist(norms, plot=TRUE, breaks=100,
main=paste("Normal data"))
#  hist(lognorms, plot=TRUE, breaks=100)
hist(exps, plot=TRUE, breaks=100,
main=paste("Exponential data"))
hist(norm.mean, plot=TRUE, breaks=100,
main=paste("Normal means, n=",n))
#  hist(lnorm.mean, plot=TRUE, breaks=100)
hist(exp.mean, plot=TRUE, breaks=100,
main=paste("Exponential means, n=",n))
hist(norm.var, plot=TRUE, breaks=100,
main=paste("Normal variances, n=",n))
#  hist(lnorm.var, plot=TRUE, breaks=100)
hist(exp.var, plot=TRUE, breaks=100,
main=paste("Exponential variances, n=",n))
hist(norm.max, plot=TRUE, breaks=100,
main=paste("Normal maximum, n=",n))
#  hist(lnorm.max, plot=TRUE, breaks=100)
hist(exp.max, plot=TRUE, breaks=100,
main=paste("Exponential maximum, n=",n))
hist(norm.range, plot=TRUE, breaks=100,
main=paste("Normal range, n=",n))
#  hist(lnorm.range, plot=TRUE, breaks=100)
hist(exp.range, plot=TRUE, breaks=100,
main=paste("Exponential range, n=",n))
}
window(h=30, w=20)
set.seed(1567038354)
samps = c(3,10,30,100)
R=10000
for(n in samps){
norms = matrix(rnorm(n=n*R, mean=0, sd=1), nrow=R)
lognorms = exp(norms)
exps = matrix(rexp(n=n*R, rate=1), nrow=R)
norm.mean = apply(X=norms, MARGIN=1, FUN=mean)
norm.var = apply(X=norms, MARGIN=1, FUN=var)
norm.max = apply(X=norms, MARGIN=1, FUN=max)
norm.min = apply(X=norms, MARGIN=1, FUN=min)
norm.range = norm.max - norm.min
lnorm.mean = apply(X=lognorms, MARGIN=1, FUN=mean)
lnorm.var = apply(X=lognorms, MARGIN=1, FUN=var)
lnorm.max = apply(X=lognorms, MARGIN=1, FUN=max)
lnorm.min = apply(X=lognorms, MARGIN=1, FUN=min)
lnorm.range = lnorm.max - lnorm.min
exp.mean = apply(X=exps, MARGIN=1, FUN=mean)
exp.var = apply(X=exps, MARGIN=1, FUN=var)
exp.max = apply(X=exps, MARGIN=1, FUN=max)
exp.min = apply(X=exps, MARGIN=1, FUN=min)
exp.range = exp.max - exp.min
window(h=30, w=20)
par(mfrow=c(5,2))
hist(norms, plot=TRUE, breaks=100,
main=paste("Normal data"))
#  hist(lognorms, plot=TRUE, breaks=100)
hist(exps, plot=TRUE, breaks=100,
main=paste("Exponential data"))
hist(norm.mean, plot=TRUE, breaks=100,
main=paste("Normal means, n=",n))
#  hist(lnorm.mean, plot=TRUE, breaks=100)
hist(exp.mean, plot=TRUE, breaks=100,
main=paste("Exponential means, n=",n))
hist(norm.var, plot=TRUE, breaks=100,
main=paste("Normal variances, n=",n))
#  hist(lnorm.var, plot=TRUE, breaks=100)
hist(exp.var, plot=TRUE, breaks=100,
main=paste("Exponential variances, n=",n))
hist(norm.max, plot=TRUE, breaks=100,
main=paste("Normal maximum, n=",n))
#  hist(lnorm.max, plot=TRUE, breaks=100)
hist(exp.max, plot=TRUE, breaks=100,
main=paste("Exponential maximum, n=",n))
hist(norm.range, plot=TRUE, breaks=100,
main=paste("Normal range, n=",n))
#  hist(lnorm.range, plot=TRUE, breaks=100)
hist(exp.range, plot=TRUE, breaks=100,
main=paste("Exponential range, n=",n))
}
# Read in data into data frame "pro".
# Display top 6 rows using head().
pro = read.csv("Prostate.csv")
# Read in data into data frame "pro".
# Display top 6 rows using head().
pro = read.csv("Prostate.csv")
library(readr)
Prostate <- read_csv("Desktop/Stat 305/Assignments/Assignment 2/Prostate.csv")
View(Prostate)
# Read in data into data frame "pro".
# Display top 6 rows using head().
pro = read.csv("Prostate.csv")
setwd("~/Desktop/Online Courses/Github Ultimate")
knitr::opts_chunk$set(echo = TRUE)
```{r, eval=FALSE}
